"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class full_state_t(object):
    __slots__ = ["timestamp", "quaternion", "gyroscope", "accelerometer", "position", "velocity", "joint_pos", "joint_vel", "joint_torque", "foot_force"]

    __typenames__ = ["int64_t", "double", "double", "double", "double", "double", "double", "double", "double", "double"]

    __dimensions__ = [None, [4], [3], [3], [3], [3], [12], [12], [12], [4]]

    def __init__(self):
        self.timestamp = 0
        self.quaternion = [ 0.0 for dim0 in range(4) ]
        self.gyroscope = [ 0.0 for dim0 in range(3) ]
        self.accelerometer = [ 0.0 for dim0 in range(3) ]
        self.position = [ 0.0 for dim0 in range(3) ]
        self.velocity = [ 0.0 for dim0 in range(3) ]
        self.joint_pos = [ 0.0 for dim0 in range(12) ]
        self.joint_vel = [ 0.0 for dim0 in range(12) ]
        self.joint_torque = [ 0.0 for dim0 in range(12) ]
        self.foot_force = [ 0.0 for dim0 in range(4) ]

    def encode(self):
        buf = BytesIO()
        buf.write(full_state_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.timestamp))
        buf.write(struct.pack('>4d', *self.quaternion[:4]))
        buf.write(struct.pack('>3d', *self.gyroscope[:3]))
        buf.write(struct.pack('>3d', *self.accelerometer[:3]))
        buf.write(struct.pack('>3d', *self.position[:3]))
        buf.write(struct.pack('>3d', *self.velocity[:3]))
        buf.write(struct.pack('>12d', *self.joint_pos[:12]))
        buf.write(struct.pack('>12d', *self.joint_vel[:12]))
        buf.write(struct.pack('>12d', *self.joint_torque[:12]))
        buf.write(struct.pack('>4d', *self.foot_force[:4]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != full_state_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return full_state_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = full_state_t()
        self.timestamp = struct.unpack(">q", buf.read(8))[0]
        self.quaternion = struct.unpack('>4d', buf.read(32))
        self.gyroscope = struct.unpack('>3d', buf.read(24))
        self.accelerometer = struct.unpack('>3d', buf.read(24))
        self.position = struct.unpack('>3d', buf.read(24))
        self.velocity = struct.unpack('>3d', buf.read(24))
        self.joint_pos = struct.unpack('>12d', buf.read(96))
        self.joint_vel = struct.unpack('>12d', buf.read(96))
        self.joint_torque = struct.unpack('>12d', buf.read(96))
        self.foot_force = struct.unpack('>4d', buf.read(32))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if full_state_t in parents: return 0
        tmphash = (0xcf0124519b869411) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if full_state_t._packed_fingerprint is None:
            full_state_t._packed_fingerprint = struct.pack(">Q", full_state_t._get_hash_recursive([]))
        return full_state_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", full_state_t._get_packed_fingerprint())[0]

